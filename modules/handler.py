
#-*-coding utf-8-*-

# [–ú–æ–¥—É–ª–∏] ==============================================================

from aiogram import types, Bot, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Command
from modules import config, keyboard, shop, logger
import sqlite3
from aiogram.dispatcher.filters.state import State, StatesGroup
import random
from pyqiwip2p import QiwiP2P
from pyqiwip2p.p2p_types import QiwiCustomer, QiwiDatetime, PaymentMethods
import datetime

# [–û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ] =================================================

db = sqlite3.connect('shop.db')
cursor = db.cursor()
storage = MemoryStorage()
bot = Bot(token=config.botkey, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
data = cursor.execute('SELECT * FROM shop').fetchall()
p2p = QiwiP2P(auth_key=config.qiwi_token)
global owners_id
owners_id = config.owners_id
# [–ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π] ============================

class FSMMoney(StatesGroup):
    userCash = State()

class FSMSendReport(StatesGroup):
    reportName = State()
    reportText = State()
    reportProof = State()
    proofLoad = State()
# [–û—Ç–≤–µ—Ç –Ω–∞ /start –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] =====================================================

async def cancel(message : types.Message, state : FSMContext):
    await state.finish()

async def welcome(message):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    userid = int(message.from_user.id)
    username = str(message.from_user.username)
    cursor.execute("""INSERT OR IGNORE INTO users (user_id, userName)
    VALUES (?, ?);
""", (userid, username));
    db.commit()
    cursor.close()
    db.close()
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ')
    await message.answer('''
 <b>üëã | –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–µ–±–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º.
–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤—ã–º—ã—à–ª–µ–Ω—ã.

–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Ñ–∞–π–ª–µ

"handler.py", —Å—Ç—Ä–æ–∫–∞ 57.

<b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>
''', reply_markup=keyboard.start, parse_mode='HTML')

# [–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤] ====================================================

async def shopCategoriesList(message):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    categories = cursor.execute('SELECT * FROM categories').fetchall()
    await bot.send_message(message.from_user.id, '''
<b>üõí –ú–∞–≥–∞–∑–∏–Ω / –ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
''', reply_markup=keyboard.genmarkup11(categories))
    cursor.close()
    db.close()

async def showCategory(callback_query : types.CallbackQuery):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    await callback_query.message.delete()
    catID = str(callback_query.data).replace('cat ', '')
    category = cursor.execute('SELECT * FROM categories WHERE catID = ?', ([catID])).fetchall()
    getProductsByCatID = cursor.execute('SELECT * FROM shop WHERE catID = ?', ([catID]))
    for i in category:
        await bot.send_photo(callback_query.from_user.id, i[0], f'''
<b>–ú–∞–≥–∞–∑–∏–Ω / –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  {i[1]}</b>

{i[2]}

<code>// –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ¬ª –°–ª–æ–≥–∞–Ω
''', reply_markup=keyboard.genmarkup(callback_query))


async def redirectToProdList(callback_query : types.CallbackQuery):
    await callback_query.message.delete()
    await shopCategoriesList(callback_query)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞

async def shopProfileRun(callback_query : types.CallbackQuery):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    prodID = str(callback_query.data).replace('prod ', '')
    getProductByID = cursor.execute('SELECT * FROM shop WHERE prodID = ?', ([prodID])).fetchall()
    await callback_query.message.delete()
    for n in getProductByID:
     prodID = n[4]
     prodName = n[0]
     prodCount = cursor.execute('SELECT COUNT(*) FROM sendData WHERE prodName = ?', ([prodName])).fetchall()
     exc3 = cursor.execute('SELECT status FROM sendData WHERE prodName = ?', ([prodName])).fetchall()
     for i in prodCount:
           prodAmount = i[0]

     for l in exc3:
           status = l[0]
           if status == "Y":
            prodAmount = "‚àû"
   
           else:
            prodAmount = prodAmount

    shopRedirecter = types.InlineKeyboardMarkup(resize_keyboard=True)
    redirectToShop = types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f'buy {prodID}')
    redirectToProdList = types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data='prodListRedirect')
    shopRedirecter.add(redirectToShop, redirectToProdList)
    for r in getProductByID:
           await bot.send_message(callback_query.from_user.id, f'''
<b>–ú–∞–≥–∞–∑–∏–Ω / {r[0]}</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>

{r[0]}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> 

{r[1]}

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 

{r[2]} —Ä—É–±.

<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {prodAmount} —à—Ç.

<code>// –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ¬ª –°–ª–æ–≥–∞–Ω
''', reply_markup=shopRedirecter)
    cursor.close()
    db.close()
# [–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] ====================================
async def profileOpen(message):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    user_id = str(message.from_user.id)
    userInfo = cursor.execute('SELECT * FROM users WHERE user_id = ?', ([user_id])).fetchall()
    for i in userInfo:
        await bot.send_message(user_id, f'''
<b>–ü—Ä–æ—Ñ–∏–ª—å:</b>

<b>ID:</b> {i[0]}
<b>–ù–∏–∫–Ω–µ–π–º:</b> {i[2]}
<b>–ë–∞–ª–∞–Ω—Å:</b> {i[1]} —Ä—É–±–ª–µ–π

<code>// –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ¬ª –°–ª–æ–≥–∞–Ω
''', reply_markup=keyboard.userProfile)

# [–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é] ==========================================

async def profileBack(message : types.Message):
    await welcome(message)

async def profileBackCallback(callback_query : types.CallbackQuery):
    await callback_query.message.delete()
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    categories = cursor.execute('SELECT * FROM categories').fetchall()
    await bot.send_message(callback_query.from_user.id, '''
<b>üõí –ú–∞–≥–∞–∑–∏–Ω / –ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
''', reply_markup=keyboard.genmarkup11(categories))
    cursor.close()
    db.close()

# [–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞] =======================================

async def infoOpen(message):
    await message.answer('''
<b>üìù | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

<code>// –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ¬ª –°–ª–æ–≥–∞–Ω
''')

# [–ü—É–Ω–∫—Ç –º–µ–Ω—é "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"] ==============================================

async def supportOpen(message):
    await message.answer('''
<b>–ú–∞–≥–∞–∑–∏–Ω / –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –∑–∞–º–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥.
–ü—Ä–æ—Å–∏–º –ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É.

<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> ¬ª @VladMozhevelnik
''')

# [–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞] ===============================================
 
async def shopBuyConfirm(message):
    await message.answer('''
‚ÄºÔ∏è | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ –∫—É–ø–∏—Ç—å?
''', reply_markup=keyboard.shopBuyConfirm)
# [–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤] ===============================================

async def userCash(message: types.Message):
    await FSMMoney.userCash.set()
    await message.answer('''–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—É–º–º—É –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—É—é –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
''')

async def qiwiBill(message: types.Message, state: FSMContext):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    userID = str(message.from_user.id)

    async with state.proxy() as qiwiBill:
        qiwiBill['userID'] = userID
        qiwiBill['moneyAmount'] = message.text
        moneyAmount = message.text
        comment = str(message.from_user.id) + '_' + str(random.randint(1000, 9999))

    if (moneyAmount.isnumeric() and int(moneyAmount) >= 5):
        billID = 'wqbi' + str(random.randint(111111, 9999999))
        bill = p2p.bill(bill_id=billID, amount=moneyAmount, lifetime=20, comment=comment)
        cursor.execute('INSERT INTO bill(userID, money, billID) VALUES(?, ?, ?)', (userID, moneyAmount, billID, ))
        db.commit()
        qiwiCashInKB = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=2)
        qiwiCashInCheck = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'{billID}')
        qiwiCashInCancel = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'del{billID}')

        qiwiCashInKB.add(qiwiCashInCheck, qiwiCashInCancel)
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {userID} –≤—ã—Å—Ç–∞–≤–∏–ª —Å—á—ë—Ç –Ω–∞ —Å—É–º–º—É {moneyAmount} —Ä—É–±–ª–µ–π.')
        await message.answer(f'''
üí∞ | –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞

<b>–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b> QIWI
<b>–°—É–º–º–∞:</b> {moneyAmount} —Ä—É–±–ª–µ–π
<b>–ù–∏–∫–Ω–µ–π–º:</b> @WOLFRAMXD
<b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {bill.bill_id}
<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á—ë—Ç–∞:</b> 20 –º–∏–Ω—É—Ç

<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {bill.pay_url}

<code>// –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ¬ª –°–ª–æ–≥–∞–Ω
''', reply_markup=qiwiCashInKB)

    else:
        await message.answer('''
<b>–û—à–∏–±–∫–∞!</b>

–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ = 5 —Ä—É–±–ª–µ–π.
''')
    await state.finish()

async def qiwiPayCheck(callback_query = types.CallbackQuery):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    billID = str(callback_query.data)
    userID = str(callback_query.from_user.id)
    getBill = cursor.execute('SELECT * FROM bill WHERE billID = ?', (billID, )).fetchone()
    if getBill is None:
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, '''
<b>üö´ | –û—à–∏–±–∫–∞</b>

–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω''')
    else:
        qiwiBillStatus = p2p.check(bill_id=billID).status
        if qiwiBillStatus == "WAITING":
            await bot.send_message(callback_query.from_user.id, '''
<b>–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞:</b>

–û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ ‚ö†Ô∏è''')

        if qiwiBillStatus == "EXPIRED":
            logger.info(f"–°—á—ë—Ç ‚Ññ{billID} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {userID} –±—ã–ª –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.")
            await callback_query.message.delete()
            await bot.send_message(callback_query.from_user.id, '''
<b>üö´ | –û—à–∏–±–∫–∞</b>

–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –∏—Å—Ç—ë–∫.
–í—ã—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—á—ë—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.
''')

        if qiwiBillStatus == "PAID":
            logger.success(f"–°—á—ë—Ç ‚Ññ{billID} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {userID} –Ω–∞ —Å—É–º–º—É {moneyAmount} –±—ã–ª –æ–ø–ª–∞—á–µ–Ω!")
            await callback_query.message.delete()
            await bot.send_message(callback_query.from_user.id, f'''
<b>‚òëÔ∏è | –°—á—ë—Ç –±—ã–ª –æ–ø–ª–∞—á–µ–Ω!</b>

–°—á—ë—Ç {getBill[2]} —Ä—É–±–ª–µ–π –æ–ø–ª–∞—á–µ–Ω!''')
            cursor.execute('UPDATE users SET money = ? WHERE user_id = ?', (getBill[2], userID, ))
            cursor.execute('DELETE * FROM bill WHERE billID = ?', (billID, ))
            db.commit()

async def qiwiPayCancel(callback_query = types.CallbackQuery):
    await callback_query.message.delete()
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    billID = str(callback_query.data).replace('del', '')
    p2p.reject(bill_id=billID)
    userID = str(callback_query.from_user.id)
    userName = str(callback_query.from_user.username)
    logger.info(f'–°—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userName} –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {billID} –±—ã–ª –∑–∞–∫—Ä—ã—Ç —Å–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
    cursor.execute('DELETE FROM bill WHERE userID = ?', (callback_query.from_user.id, ))
    db.commit()
    await bot.send_message(callback_query.from_user.id, '–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')


async def shopBuyProduct(callback_query : types.CallbackQuery):
    await callback_query.message.delete()
    db =  sqlite3.connect('shop.db')
    cursor = db.cursor()
    prodID = str(callback_query.data).replace('buy ', '')
    prodData = cursor.execute('SELECT * FROM shop WHERE prodID = ?', ([prodID])).fetchall()
    user_id = str(callback_query.from_user.id)
    for i in prodData:
        confirmMarkup = types.InlineKeyboardMarkup()
        confYes = types.InlineKeyboardButton(text='[‚úîÔ∏è] –î–∞', callback_data='buyConfYes ' + str(prodID))
        confNo = types.InlineKeyboardButton(text='[‚úñÔ∏è] –ù–µ—Ç', callback_data='buyCancel')
        confirmMarkup.add(confYes, confNo)
        await bot.send_message(user_id, f'''
–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {i[0]}?
''', reply_markup=confirmMarkup)
        cursor.close()
        db.close()
async def shopBuyProductIfYes(callback_query : types.CallbackQuery):
     await callback_query.message.delete()
     db = sqlite3.connect('shop.db')
     cursor = db.cursor()
     prodID = str(callback_query.data).replace('buyConfYes ', '')
     userID = str(callback_query.from_user.id)
     userName = str(callback_query.from_user.username)
     money = cursor.execute('SELECT money FROM users WHERE user_id = ?', ([userID])).fetchall()
     for m in money:
         userMoney = m[0]

     product = cursor.execute('SELECT * FROM shop WHERE prodID = ?', (prodID,)).fetchall()
     for i in product:
         prodPrice = i[2]
         prodName = i[0]
     amount = cursor.execute('SELECT COUNT(*) FROM sendData WHERE prodName = ?', ([prodName])).fetchall()
     prodAmount = str(amount[0]).replace('(', '').replace(',)', '')
     if int(prodAmount) == 0:
          await bot.send_message(callback_query.from_user.id, '–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.')
          return
     else:
          pass

     if float(userMoney) < float(prodPrice):
          await bot.send_message(callback_query.from_user.id, '''
üö´ | –û—à–∏–±–∫–∞

–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–æ—Ñ–∏–ª—å => –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç
''')
     else:
         amountMoney = float(userMoney) - float(prodPrice)
         cursor.execute('UPDATE users SET money = ? WHERE user_id = ?', (amountMoney, userID))
         sendData = cursor.execute('SELECT * FROM sendData WHERE prodName = ? LIMIT 1', ([prodName])).fetchall()

         for b in sendData:
             prodData = b[1]
         purchaseTime = str(datetime.datetime.now())
         cursor.execute('INSERT INTO userPurchases(userID, userName, prodName, prodPrice, product, purchaseTime) VALUES(?, ?, ?, ?, ?, ?)', (userID, userName, prodName, prodPrice, prodData, purchaseTime, ))
         db.commit()
         logger.success(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {userName}({userID}) –ø—Ä–∏–æ–±—Ä–µ–ª(–∞) —Ç–æ–≤–∞—Ä {prodName} –∑–∞ {prodPrice} —Ä—É–±–ª–µ–π.')
         await bot.send_message(callback_query.from_user.id, '''
–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä. 
–ï—Å–ª–∏ –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä, —Ç–æ –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
''')

         for i in sendData:
              unlimitedStatus = i[2]
              if unlimitedStatus == "N":
                  await bot.send_message(callback_query.from_user.id, f'''
<b>–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {i[0]}</b>

<b>–¢–æ–≤–∞—Ä:</b>
{i[1]}

<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>
''')
                  cursor.execute('DELETE FROM sendData WHERE product = ?', ([i[1]]))
                  db.commit()
                  cursor.close()

              else:
                  await bot.send_message(callback_query.from_user.id, f'''
<b>–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {i[0]}</b>

<b>–¢–æ–≤–∞—Ä:</b>
{i[1]}

<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>
''')
              cursor.close()
              db.close()
def register_handlers(dp : Dispatcher):
    dp.register_message_handler(cancel, text='–û—Ç–º–µ–Ω–∞', state='*')
    dp.register_message_handler(shopCategoriesList, text="üõí –ú–∞–≥–∞–∑–∏–Ω")
    dp.register_message_handler(profileBack, text="‚óÄ  –ù–∞–∑–∞–¥")
    dp.register_callback_query_handler(profileBackCallback, text=['back'])
    dp.register_message_handler(infoOpen, text="üìî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    dp.register_message_handler(supportOpen, text="üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    dp.register_message_handler(welcome, commands=['start'])
    dp.register_message_handler(profileOpen, text="üì∞ –ü—Ä–æ—Ñ–∏–ª—å")
    dp.register_callback_query_handler(shopProfileRun, lambda x: x.data.startswith('prod '))
    dp.register_message_handler(userCash, text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç')
    dp.register_message_handler(qiwiBill, state=FSMMoney.userCash)
    dp.register_callback_query_handler(redirectToProdList, text=['prodListRedirect'])
    dp.register_callback_query_handler(qiwiPayCheck, lambda x: x.data.startswith('wqbi'))
    dp.register_callback_query_handler(qiwiPayCancel, lambda x: x.data.startswith('delwqbi'))
    dp.register_callback_query_handler(shopBuyProduct, lambda x: x.data.startswith('buy '))
    dp.register_callback_query_handler(shopBuyProductIfYes, lambda x: x.data.startswith('buyConfYes '))
    dp.register_callback_query_handler(showCategory, lambda x: x.data.startswith('cat '))
