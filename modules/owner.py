
# [–ú–æ–¥—É–ª–∏] ==============================================================

from aiogram import types, Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Command
from modules import config, keyboard, shop, handler, logger
import sqlite3
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from time import sleep
# [–û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ] =================================================
	
db = sqlite3.connect('shop.db')
cursor = db.cursor()
storage = MemoryStorage()
bot = Bot(token=config.botkey, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)

# [–ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π] ====================================================

class FSMAdmin(StatesGroup):
    catID = State()
    prodName = State()
    prodDesc = State()
    prodPrice = State()

class FSMProdAddData(StatesGroup):
    prodDataText = State()
    prodDataUnlimited = State()

class FSMSetMoney(StatesGroup):
    money = State()

class FSMCreateAd(StatesGroup):
    adPhoto = State()
    adText = State()
    adName = State()

class FSMCreateCategory(StatesGroup):
    catPhoto = State()
    catName = State()
    catDesc = State()

class FSMReportAnswer(StatesGroup):
    text = State()

class FSMReportCloseWithReason(StatesGroup):
    reason = State()
# [–í—ã–∑–æ–≤ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞] =======================================

async def checkAccess(userID):
    owners_id = config.owners_id
    if userID in owners_id:
        return True
    else:
        return False

async def callOwnerMenu(message):
 userID = str(message.from_user.id)
 userName = str(message.from_user.username)
 if await checkAccess(userID) == True:
     logger.warn(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {userName} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
     await message.answer('''
<b>üíª | –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
–∏ —É–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å —É
—Å–µ–±—è –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å
–ª–æ–≥–∏.
''', reply_markup=keyboard.ownerDashboard, parse_mode='HTML')
 else:
    return

async def ownerBackBtn(message):
     await message.answer('''
 <b>üëã | –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–î–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –±—ã–ª –Ω–∞–ø–∏—Å–∞–Ω WolframRDD
–°–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ handler.py,
–í –ø–∞–ø–∫–µ modules.
–ú–æ–π GitHub: @WolframRDD
''', reply_markup=keyboard.start, parse_mode='HTML')

async def ownerBackToAdmin(message):
    userID = str(message.from_user.id)
    if await checkAccess(userID) == True:
        await callOwnerMenu(message)
    else:
        return

async def prodDeleteChoose(message):
 db = sqlite3.connect('shop.db')
 cursor = db.cursor()
 userID = str(message.from_user.id)
 if await checkAccess(userID) == True:
    data = cursor.execute('SELECT * FROM shop').fetchall()
    await bot.send_message(message.from_user.id, '''
üíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å / –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å
''', reply_markup=keyboard.genmarkup2(data))
 else:
    return
 cursor.close()
 db.close()

async def ownerCategoryMenu(message : types.Message):
 userID = str(message.from_user.id)
 if await checkAccess(userID) == True:
    await message.answer('''
<b>üóÉÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ / –ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
''', reply_markup=keyboard.categoriesMenu)

 else:
    return

async def ownerCategoryCreate(message : types.Message):
 db = sqlite3.connect('shop.db')
 cursor = db.cursor()
 userID = str(message.from_user.id)
 if await checkAccess(userID) == True:
     await FSMCreateCategory.catPhoto.set()
     await message.answer('''
–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #1

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–ª–æ–∂–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–§–æ—Ç–æ):
–û–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
''')
 else:
     return

async def ownerCatPhotoLoad(message : types.Message, state : FSMContext):
    async with state.proxy() as catData:
        catData['photo'] = message.photo[0].file_id
    await FSMCreateCategory.next()
    await message.answer('''
–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #2

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
''')

async def ownerCatNameLoad(message : types.Message, state : FSMContext):
    async with state.proxy() as catData:
        catData['name'] = message.text
        await FSMCreateCategory.next()
        await message.answer('''
–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #3

–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
''')

async def ownerCatDescLoad(message : types.Message, state : FSMContext):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    async with state.proxy() as catData:
        catData['desc'] = message.text
        catPhoto = catData['photo']
        catName = catData['name']
        catDesc = catData['desc']
        cursor.execute('INSERT INTO categories(catPhoto, catName, catDesc) VALUES(?, ?, ?)', (catPhoto, catName, catDesc))
        db.commit()
        catID = cursor.execute('SELECT catID from categories WHERE catName = ?', ([catName])).fetchall()
        logger.success(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {catName}.')
    await state.finish()
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    cursor.close()
    db.close()

async def ownerCatDelete(message : types.Message):
    userID = str(message.from_user.id)
    if await checkAccess(userID) == True:
        db = sqlite3.connect('shop.db')
        cursor = db.cursor()
        categories = cursor.execute('SELECT * FROM categories')
        await bot.send_message(message.from_user.id, '''
–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.
–¢–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!
''', reply_markup=keyboard.genmarkup13(categories))
        cursor.close()
        db.close()
    else:
        return

async def catDelete(callback_query : types.CallbackQuery):
 db = sqlite3.connect('shop.db')
 cursor = db.cursor()
 userID = str(callback_query.from_user.id)
 if await checkAccess(userID) == True:
    catID = str(callback_query.data).replace('delcat ', '')
    cursor.execute('DELETE FROM shop WHERE catID = ?', ([catID]))
    cursor.execute('DELETE FROM categories WHERE catID = ?', ([catID]))
    logger.success(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Ññ{catID} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.')
    db.commit()
    cursor.close()
    db.close()

 else:
    return

async def addProductChooseCategory(message : types.Message):
 db = sqlite3.connect('shop.db')
 cursor = db.cursor()
 userID = str(message.from_user.id)
 if await checkAccess(userID) == True:
    categories = cursor.execute('SELECT * FROM categories').fetchall()
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', reply_markup=keyboard.genmarkup12(categories))
 else:
    return
 cursor.close()
 db.close()

async def ownerProductsMenu(message : types.Message):
    userID = str(message.from_user.id)
    if await checkAccess(userID) == True:
        await bot.send_message(message.from_user.id, '''<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ / –¢–æ–≤–∞—Ä—ã</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã.
''', reply_markup=keyboard.productsMenu)
    else:
        return

async def addProduct(callback_query : types.CallbackQuery, state : FSMContext):
    userID = str(callback_query.from_user.id)
    if await checkAccess(userID) == True:
        await FSMAdmin.catID.set()
        catID = str(callback_query.data).replace('setcat ', '')
        async with state.proxy() as prodData:
            prodData['catID'] = catID
        await FSMAdmin.next()
        await bot.send_message(callback_query.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    else:
        return

async def prodNameLoad(message: types.Message, state: FSMContext):
    async with state.proxy() as prodData:
        cursor = db.cursor()
        prodData['name'] = message.text
    await FSMAdmin.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É:")
    cursor.close()

async def prodDescLoad(message: types.Message, state: FSMContext):
    cursor = db.cursor()
    async with state.proxy() as prodData:
        prodData['desc'] = message.text
    await FSMAdmin.next()
    await message.reply('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:')
    cursor.close()

async def prodPriceLoad(message: types.Message, state: FSMContext):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    async with state.proxy() as prodData:
        username = message.from_user.username
        cursor = db.cursor()
        prodName = prodData['name']
        prodDesc = prodData['desc']
        prodData['price'] = message.text
        prodPrice = prodData['price']
        catID = prodData['catID']
        cursor.execute('INSERT INTO shop(prodName, prodDesc, prodPrice, catID) VALUES (?, ?, ?, ?)', (prodName, prodDesc, prodPrice, catID))
        db.commit()
        logger.success(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä {prodName}.')
        cursor.close()
    await state.finish()
    cursor.close()
    db.close()

async def prodAddData1(message : types.Message):
 db = sqlite3.connect('shop.db')
 cursor = db.cursor()
 userID = str(message.from_user.id)
 if await checkAccess(userID) == True:
    data = cursor.execute('SELECT * FROM shop').fetchall
    await bot.send_message(message.from_user.id, '''
<b>üíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å \ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:
''', reply_markup=keyboard.genmarkup4(data))
 else:
    return
 cursor.close()
 db.close()

async def prodDelete(callback_query : types.CallbackQuery):
 db = sqlite3.connect('shop.db')
 cursor = db.cursor()
 userID = str(callback_query.from_user.id)
 if await checkAccess(userID) == True:
    cb_data = callback_query.data
    prodID = cb_data.replace('rem ', '')
    product = cursor.execute('SELECT * FROM shop WHERE prodID = ?', ([prodID])).fetchall()
    userName = callback_query.from_user.username
    for i in product:
        prodName = i[0]
    cursor.execute('DELETE FROM shop WHERE prodName = ?', ([prodName]))
    cursor.execute('DELETE FROM sendData WHERE prodName = ?', ([prodName]))
    db.commit()
    await bot.send_message(callback_query.from_user.id, '''
<b>üíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å / –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>

–¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.
''')
    logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {userName} —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä {prodName}!")

 else:
    return
 cursor.close()
 db.close()

async def prodAddData2(callback_query : types.CallbackQuery, state: FSMContext):
    query = str(callback_query.data).replace('addData ', '')
    product = cursor.execute('SELECT *  FROM shop WHERE prodID = ?', (query, ))
    async with state.proxy() as prodDataText:
        for i in product:
            prodDataText['name'] = i[0] 
    await FSMProdAddData.prodDataText.set()
    await bot.send_message(callback_query.from_user.id, '''
üíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å \ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ \ –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞.
''')

async def prodDataLoad(message : types.Message, state: FSMContext):
    async with state.proxy() as prodDataText:
        prodDataText['data'] = message.text
        await message.answer('–°–¥–µ–ª–∞—Ç—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º? [Y / N]')
        await FSMProdAddData.next()

async def prodDataUnlimitedLoad(message : types.Message, state : FSMContext):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    async with state.proxy() as prodDataText:
        status = message.text
        prodDataName = prodDataText['name']
        prodDataText = prodDataText['data']
        cursor.execute('INSERT INTO sendData(prodName, product, status) VALUES(?, ?, ?)', (prodDataName, prodDataText, status, ))
        db.commit()
        await state.finish()
    cursor.close()
    db.close()

async def ownerChooseUserSetMoney(message : types.Message):
 userID = str(message.from_user.id)
 if await checkAccess(userID) == True:
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    users = cursor.execute('SELECT * FROM users').fetchall()
    await message.answer('–ö–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å?', reply_markup=keyboard.genmarkup7(users))
    cursor.close()
    db.close()
 else:
    return

async def ownerSetMoney(callback_query : types.CallbackQuery, state: FSMContext):
 userID = str(callback_query.from_user.id)
 if await checkAccess(userID) == True:
    user = str(callback_query.data).replace('setMoney ', '')
    async with state.proxy() as ownerSetMoney:
        ownerSetMoney['id'] = user
        await state.finish()
    await FSMSetMoney.money.set()
    await bot.send_message(callback_query.from_user.id, '''
<b>üíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å \ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>

–°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å—á—ë—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
''')
 else:
    return

async def ownerSetMoneyLoad(message : types.Message, state: FSMContext):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    username = message.from_user.username
    async with state.proxy() as ownerSetMoney:
        ownerSetMoney['money'] = message.text
        await state.finish()
    amountMoney = ownerSetMoney['money']
    goalUser = ownerSetMoney['id']
    cursor.execute(f'UPDATE users SET money = ? WHERE user_id = ?', (amountMoney, goalUser))
    db.commit()
    logger.warn(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {goalUser} —Å—É–º–º—É –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—ë: {amountMoney} —Ä—É–±–ª–µ–π')
    cursor.close()
    db.close()

async def ownerCheckDatabase(message : types.Message):
    userID = str(message.from_user.id)
    if await checkAccess(userID) == True:
        await message.answer('''
<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å / –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
''', reply_markup=keyboard.ownerDatabase)
    else:
        return

async def ownerDbProductsLoad(callback_query : types.CallbackQuery):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    shop = cursor.execute('SELECT * FROM shop').fetchall()
    await bot.send_message(callback_query.from_user.id, '''
<b>–ú—ã –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã:</b>
''', reply_markup=keyboard.genmarkup(shop))
    cursor.close()
    db.close()

async def ownerDbUsersLoad(callback_query : types.CallbackQuery):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    user = cursor.execute('SELECT * FROM users').fetchall()
    await bot.send_message(callback_query.from_user.id, '''
<b>–ú—ã –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
''', reply_markup=keyboard.genmarkup8(user))
    cursor.close()
    db.close()

async def ownerCheckPurchasesLoad(callback_query : types.CallbackQuery):
    users = cursor.execute('SELECT * FROM users').fetchall()
    await bot.send_message(callback_query.from_user.id, '''
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ –ø–æ–∫—É–ø–æ–∫:
''', reply_markup=keyboard.genmarkup14(users))

async def ownerCheckPurchases(callback_query : types.CallbackQuery):
    userID = str(callback_query.data).replace('purc ', '')
    getUserPurchases = cursor.execute('SELECT * FROM userPurchases WHERE userID = ?', (userID, )).fetchall()
    for i in getUserPurchases:
        await bot.send_message(callback_query.from_user.id, f'''
<b>–ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i[1]}</b>

–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {i[2]}
–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {i[3]}

–¢–æ–≤–∞—Ä: 
{i[4]}

–í—Ä–µ–º—è –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏: 
{i[5]}

ID –ø–æ–∫—É–ø–∫–∏: {i[6]}

''')
async def ownerAdvertsMenuOpen(message : types.Message):
    await bot.send_message(message.from_user.id, '''
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.
''', reply_markup=keyboard.ownerAdvertsMenu)

async def ownerAdvertsCreate(message : types.Message):
     await FSMCreateAd.adPhoto.set()
     await message.answer('''
–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #1

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–ª–æ–∂–∫—É –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–§–æ—Ç–æ):
''')

async def ownerAdPhotoLoad(message : types.Message, state : FSMContext):
    async with state.proxy() as adData:
        adData['adPhoto'] = message.photo[0].file_id
    await FSMCreateAd.next()
    await message.answer('''
–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #2

–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
''')

async def ownerAdTextLoad(message : types.Message, state : FSMContext):
    async with state.proxy() as adData:
        adData['adText'] = message.text
        await FSMCreateAd.next()
        await message.answer('''
–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:

–í–ù–ò–ú–ê–ù–ò–ï: –û–Ω–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.
''')

async def ownerAdNameLoad(message : types.Message, state : FSMContext):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()    
    async with state.proxy() as adData:
        adData['adName'] = message.text
        adPhoto = adData['adPhoto']
        adText = adData['adText']
        adName = adData['adName']
        cursor.execute('INSERT INTO adverts(adPhoto, adText, adName) VALUES(?, ?, ?)', (adPhoto, adText, adName))
        db.commit()
    await state.finish()
    await message.answer('–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    cursor.close()
    db.close()

async def ownerAdSend(message : types.Message, state : FSMContext):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    adverts = cursor.execute('SELECT * FROM adverts').fetchall()
    await message.answer('''
–†–∞—Å—Å—ã–ª–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:
''', reply_markup=keyboard.genmarkup9(adverts))
    cursor.close()
    db.close()

async def ownerAdSendAllUsers(callback_query : types.CallbackQuery):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    users = cursor.execute('SELECT user_id FROM users').fetchall()
    calldata = str(callback_query.data).replace('send ', '')
    advert = cursor.execute('SELECT * FROM adverts WHERE adID = ?', ([calldata])).fetchall()
    
    for k in users:
        for i in advert:
            await bot.send_photo(k[0], i[0], i[1])
    cursor.close()
    db.close()

async def ownerAdDelete(message : types.Message):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    adverts = cursor.execute('SELECT * FROM adverts').fetchall()
    await message.answer('''
–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫

–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–¥–∞–ª–∏—Ç—å:
''', reply_markup=keyboard.genmarkup10(adverts))
    cursor.close()
    db.close()

async def adDelete(callback_query : types.CallbackQuery):
    db = sqlite3.connect('shop.db')
    cursor = db.cursor()
    adID = str(callback_query.data).replace('addel ', '')
    advert = cursor.execute('SELECT * FROM adverts WHERE adID = ?', (adID, )).fetchall()
    for i in advert:
        cursor.execute('DELETE FROM adverts WHERE adID = ?', (i[3], ))
        db.commit()
        await bot.send_message(callback_query.from_user.id, f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {i[2]} —Å ID {i[3]} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.')
    cursor.close()
    db.close()
def register_handlers(dp : Dispatcher):
 dp.register_message_handler(callOwnerMenu, text='Admin')
 dp.register_message_handler(ownerBackBtn, text='‚§µÔ∏è –ù–∞–∑–∞–¥')
 dp.register_message_handler(addProductChooseCategory, text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
 dp.register_callback_query_handler(addProduct, lambda x: x.data.startswith('setcat '))
 dp.register_message_handler(prodNameLoad, state=FSMAdmin.prodName)
 dp.register_message_handler(prodDescLoad, state=FSMAdmin.prodDesc)
 dp.register_message_handler(prodPriceLoad, state=FSMAdmin.prodPrice)
 dp.register_callback_query_handler(prodDelete, lambda x: x.data.startswith('rem '))
 dp.register_message_handler(prodDeleteChoose, text='–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
 dp.register_message_handler(prodAddData1, text='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É')
 dp.register_message_handler(prodDataLoad, state=FSMProdAddData.prodDataText)
 dp.register_callback_query_handler(prodAddData2, lambda x: x.data.startswith('addData '))
 dp.register_message_handler(ownerChooseUserSetMoney, text='–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
 dp.register_callback_query_handler(ownerSetMoney, lambda x: x.data.startswith('setMoney'))
 dp.register_message_handler(ownerSetMoneyLoad, state=FSMSetMoney.money)
 dp.register_message_handler(ownerCheckDatabase, text='–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')
 dp.register_callback_query_handler(ownerDbProductsLoad, text=['checkDbProd'])
 dp.register_callback_query_handler(ownerDbUsersLoad, text=['checkDbUsers'])
 dp.register_callback_query_handler(ownerCheckPurchasesLoad, text=['checkPurchases'])
 dp.register_callback_query_handler(ownerCheckPurchases, lambda x: x.data.startswith('purc '))
 dp.register_message_handler(prodDataUnlimitedLoad, state=FSMProdAddData.prodDataUnlimited)
 dp.register_message_handler(ownerAdvertsMenuOpen, text='–†–∞—Å—Å—ã–ª–∫–∏')
 dp.register_message_handler(ownerAdvertsCreate, text="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
 dp.register_message_handler(ownerAdPhotoLoad, content_types=['photo'], state=FSMCreateAd.adPhoto)
 dp.register_message_handler(ownerAdNameLoad, state=FSMCreateAd.adName)
 dp.register_message_handler(ownerAdTextLoad, state=FSMCreateAd.adText)
 dp.register_message_handler(ownerAdSend, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
 dp.register_callback_query_handler(ownerAdSendAllUsers, lambda x: x.data.startswith('send'))
 dp.register_message_handler(ownerAdDelete, text="–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
 dp.register_message_handler(ownerCategoryMenu, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
 dp.register_message_handler(ownerCategoryCreate, text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
 dp.register_message_handler(ownerCatDelete, text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
 dp.register_callback_query_handler(catDelete, lambda x: x.data.startswith('delcat '))
 dp.register_message_handler(ownerCatPhotoLoad, content_types=['photo'], state=FSMCreateCategory.catPhoto)
 dp.register_message_handler(ownerCatNameLoad, state=FSMCreateCategory.catName)
 dp.register_message_handler(ownerCatDescLoad, state=FSMCreateCategory.catDesc)
 dp.register_callback_query_handler(adDelete, lambda x: x.data.startswith('addel '))
 dp.register_message_handler(ownerProductsMenu, text='–¢–æ–≤–∞—Ä—ã')
 dp.register_message_handler(ownerBackToAdmin, text='–ù–∞–∑–∞–¥')
